{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Tour por la aplicación Gestor de Alumnos",
  "steps": [
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 21,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 10
        }
      },
      "description": "     db = QSqlDatabase.addDatabase(\"QSQLITE\")\r\n     - Agrega una base de datos a la lista de conexiones de base de datos utilizando el tipo de controlador y el nombre de conexión nombreConexión. Si ya existe una conexión de base de datos llamada nombreConexión, esa conexión se elimina.\r\n ----------------------------------------------------------------------------------------------------\r\n     db.setDatabaseName(\"BDDalumnos.db\")\r\n     - Establece el nombre de la base de datos de la conexión en name. Para que tenga efecto, el nombre de la base de datos debe establecerse antes de que se abra la conexión.\r\n ------------------------------------------------------------------------------------------------------\r\n     deb.open()\r\n     - Abre la conexión de la base de datos utilizando los valores de conexión actuales."
    },
    {
      "file": "Trabajo5.py",
      "description": "     self.setup.Ui(self)\r\n     - Utilizado para construir el árbol de widgets en el widget principal.",
      "line": 31,
      "selection": {
        "start": {
          "line": 30,
          "character": 1
        },
        "end": {
          "line": 30,
          "character": 27
        }
      }
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 32,
          "character": 1
        },
        "end": {
          "line": 34,
          "character": 29
        }
      },
      "description": "     self.modelo = QSqlRelationalTableModel(db=db)\r\n     - Crea un QSqlRelationalTableModel vacío y establece el padre a padre y la conexión de la base de datos a db. Si db no es válido, se utilizará la conexión de base de datos predeterminada.\r\n     --------------------------------------------------------------------------------------------------\r\n     self.modelo.setTable(\"persona\")\r\n     - Establece la tabla del modelo.\r\n     -------------------------------------------------------------------------\r\n     self.modelo.select()\r\n     Hace el select del modelo."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 36,
          "character": 1
        },
        "end": {
          "line": 42,
          "character": 65
        }
      },
      "description": "     self.modelo.setHeaderData()\r\n     - Las clases de vista muestran un encabezado en la parte superior para etiquetar las columnas. Para cambiar los textos del encabezado, llama a setHeaderData() en el modelo."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 44,
          "character": 1
        },
        "end": {
          "line": 48,
          "character": 76
        }
      },
      "description": "     self.tableView_2.setModel(self.modelo)\r\n     - Establece el modelo en el table view de la aplicación.\r\n     ----------------------------------------------------------------------\r\n     self.tableView_2.resizeColumnsToContents()\r\n     - Ajusta el tamaño de las columnas al contenido del modelo\r\n     -----------------------------------------------------------------------\r\n     self.tableView_2.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n     - Deshabilita la edición directa de la tabla\r\n     ----------------------------------------------------------------------\r\n     self.tableView_2.setSelectionMode(QAbstractItemView.SingleSelection)\r\n     self.tableView_2.setSelectionBehavior(QAbstractItemView.SelectRows)\r\n     - Establece que se seleccionen filas completas de la tabla en lugar de celdas individuales"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 52,
          "character": 1
        },
        "end": {
          "line": 58,
          "character": 67
        }
      },
      "description": "     self.tableView_2.selectionModel().selectionChanged.connect(self.seleccion)\r\n     - Crea la señal, cuando cambia la selección en la tabla ejecuta el método self.selección\r\n     --------------------------------------------------------------------------------------------------\r\n     self.botonModificar.clicked.connect(self.modificar)\r\n     self.actionModificarAlumno.triggered.connect(self.modificar)\r\n     - Crea la señal para el botón modificar y para la acción modificar y las conecta con el método self.modificar.\r\n     ------------------------------------------------------------------------------------------------\r\n     self.botonAniadirAlumno.clicked.connect(self.nueva)\r\n     self.actionAniadir.triggered.connect(self.nueva)\r\n     - Crea la señal y cuando se ejecuta la acción Aniadir o el boton Aniadir alumno ejecuta self.nueva\r\n     --------------------------------------------------------------------------------------------------\r\n     self.actionEliminar.triggered.connect(self.borrar)\r\n     self.boton_Eliminar.clicked.connect(self.borrar)\r\n     - Crea la señal para el botón_Eliminar y para la acción eliminar y las conecta con la ejecución del método self.borrar.\r\n     ------------------------------------------------------------------------------------------------\r\n     self.actionGenerar_Informe.triggered.connect(self.informe)\r\n     - Crea la señal para la acción generar informe y la conecta con la ejecución del método self.informe.\r\n"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 60,
          "character": 1
        },
        "end": {
          "line": 60,
          "character": 54
        }
      },
      "description": "     self.actionGenerar_Informe.setDisabled(False)\r\n     - Aseguramos que la acción generar informe no esté deshabilitada"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 62,
          "character": 1
        },
        "end": {
          "line": 62,
          "character": 23
        }
      },
      "description": "     self.fila = -1\r\n     - Ponemos la fila inicial de la tabla a un valor que nos indica que no está seleccionada ninguna fila."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 64,
          "character": 1
        },
        "end": {
          "line": 67,
          "character": 74
        }
      },
      "description": "     self.wizard = QWizard()\r\n     - Aquí creamos el wizard o asistente.\r\n     -----------------------------------------------------\r\n     self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n     - Le establecemos un estilo. \r\n     ----------------------------------------------------------------------\r\n     self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('watermark.jpg'))\r\n     - Establecemos la marca de agua del asistente\r\n     -------------------------------------------------------------------------\r\n     self.wizard.setPixmap(QWizard.BannerPixmap,QPixmap('Banner.png'))\r\n     - Establecemos el banner."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 69,
          "character": 4
        },
        "end": {
          "line": 75,
          "character": 51
        }
      },
      "description": "     self.page1 = QWizardPage()\r\n     -  Creamos una página para el asistente\r\n     ------------------------------------------\r\n     self.page1.setTitle()\r\n     - Le establecemos un título\r\n     ------------------------------------------\r\n     self.page1.setSubTitle()\r\n     - Y también un subtítulo\r\n     -------------------------------------------------------------------------------\r\n     self.labelNotaMedia = QLabel('¿Desea generar la nota final del alumno Si/No?:')\r\n     - Creamos un label para preguntar si el usuario desea generar la nota final\r\n     ---------------------------------------------------------------------------------\r\n     self.comboBox_Bool_NotaMedia = QComboBox()\r\n     - Creamos un combobox para contestar a la pregunta\r\n     ----------------------------------------------------------------\r\n     self.comboBox_Bool_NotaMedia.addItem('Si')\r\n     self.comboBox_Bool_NotaMedia.addItem('No')\r\n     - Le añadimos las dos opciones"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 77,
          "character": 1
        },
        "end": {
          "line": 81,
          "character": 40
        }
      },
      "description": "     hLayout1 = QHBoxLayout(self.page1)\r\n     - Creamos un layout horizontal y le introducimos la página creada anteriormente\r\n     ----------------------------------------------------------------------------------\r\n     hLayout1.addWidget(self.labelNotaMedia)\r\n     hLayout1.addWidget(self.comboBox_Bool_NotaMedia)\r\n     - Le añadimos el label y el comboBox\r\n     -------------------------------------------------------------------\r\n     self.page1.registerField('miCampo', self.comboBox_Bool_NotaMedia)\r\n     - Registramos la respuesta seleccionada en el comboBox\r\n     --------------------------------------------------------------------\r\n     self.wizard.addPage(self.page1)\r\n     - Por último añadimos la página al asistente.\r\n     - Haremos lo mismo para la página siguiente."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 101,
          "character": 1
        },
        "end": {
          "line": 101,
          "character": 38
        }
      },
      "description": "     self.page3.setFinalPage(True)\r\n     - Establecemos la página 3 como la página final del asistente."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 104,
          "character": 1
        },
        "end": {
          "line": 105,
          "character": 46
        }
      },
      "description": "     finish = self.wizard.button(QWizard.FinishButton)\r\n     - Establecemos la variable para el botón finalizar del asistente\r\n     --------------------------------------------------------------------\r\n     finish.clicked.connect(self.generate)\r\n      - Creamos la señal para conectarla al método generate"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 108,
          "character": 1
        },
        "end": {
          "line": 111,
          "character": 27
        }
      },
      "description": "     def informe(self):\r\n        dni = self.modelo.index(self.fila, 0).data()\r\n        self.page1.setSubTitle(f'Informe del alumno con DNI: {dni}')\r\n        self.wizard.show()\r\n     - Esta función recoge el valor del dni de la fila seleccionada antes de ejecutar la acción generar informe y recoge el dni del alumno para mostrarlo en el subtítulo de la primera página,\r\n     a continuación muestra el asistente."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 112,
          "character": 4
        },
        "end": {
          "line": 144,
          "character": 86
        }
      },
      "description": "     def nueva(self):\r\n     - Método que crea una nueva fila en la tabla\r\n     nuevaFila = self.modelo.rowCount()\r\n     - Guardamos en la variable nuevaFila el número de filas del modelo\r\n     ------------------------------------------------------------------------------------------\r\n     self.modelo.insertRow(nuevaFila)\r\n     - Insertamos una nueva fila en el modelo en la posición de ese valor\r\n     -----------------------------------------------------------------------------------------\r\n     self.tableView_2.selectRow(nuevaFila)\r\n     - Seleccionamos la fila nueva\r\n     ------------------------------------------------------------------------------------------\r\n        dni = self.lineEdit_DNI.text()\r\n        nombre = self.lineEdit_Nombre.text()\r\n        apellidos = self.lineEdit_Apellidos.text()\r\n        curso = self.lineEdit_Curso.text()\r\n        nota1ev = self.lineEdit_Nota1Ev.text()\r\n        nota2ev = self.lineEdit_Nota2Ev.text()\r\n        nota3ev = self.lineEdit_Nota3Ev.text()\r\n      - Cogemos los campos de los line edit\r\n      ----------------------------------------------------------------------------------------  \r\n        self.modelo.setData(self.modelo.index(nuevaFila, 0), dni)\r\n        self.modelo.setData(self.modelo.index(nuevaFila, 1), nombre)\r\n        self.modelo.setData(self.modelo.index(nuevaFila, 2), apellidos)\r\n        self.modelo.setData(self.modelo.index(nuevaFila, 3), curso)\r\n        self.modelo.setData(self.modelo.index(nuevaFila, 4), nota1ev)\r\n        self.modelo.setData(self.modelo.index(nuevaFila, 5), nota2ev)\r\n        self.modelo.setData(self.modelo.index(nuevaFila, 6), nota3ev)\r\n        -------------------------------------------------------------------------------\r\n        self.modelo.submit()\r\n        -  Ejecutamos los cambios en el modelo\r\n      ---------------------------------------------------------------------------------------\r\n        self.lineEdit_DNI.setText(\"\")\r\n        self.lineEdit_Nombre.setText(\"\")\r\n        self.lineEdit_Apellidos.setText(\"\")\r\n        self.lineEdit_Curso.setText(\"\")\r\n        self.lineEdit_Nota1Ev.setText(\"\")\r\n        self.lineEdit_Nota2Ev.setText(\"\")\r\n        self.lineEdit_Nota3Ev.setText(\"\")\r\n      - Ponemos en blanco los lineEdit\r\n        QMessageBox.information(self, \"Nueva Fila\", \"Se ha generado una nueva fila\") \r\n        - Mostramos un mensaje al usuario informandole de que se ha generado una nueva fila"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 170,
          "character": 1
        },
        "end": {
          "line": 183,
          "character": 84
        }
      },
      "description": "    def borrar(self):\r\n     - Método que elimina un registro del modelo y de la tabla\r\n        if self.fila >= 0:\r\n         - Si es una fila válida la seleccionada\r\n            self.modelo.removeRow(self.fila)\r\n         - Borramos la fila en el modelo\r\n            self.modelo.select()\r\n         - Actualizamos la tabla   \r\n            self.fila = -1\r\n         - Y ponemos la fila actual a -1   \r\n            self.lineEdit_DNI.setText(\"\")\r\n            self.lineEdit_Nombre.setText(\"\")\r\n            self.lineEdit_Apellidos.setText(\"\")\r\n            self.lineEdit_Curso.setText(\"\")\r\n            self.lineEdit_Nota1Ev.setText(\"\")\r\n            self.lineEdit_Nota2Ev.setText(\"\")\r\n            self.lineEdit_Nota3Ev.setText(\"\")\r\n         - Reseteamos los valores en los campos del formulario   \r\n            QMessageBox.information(self, \"Eliminado\", \"Se ha eliminado el alumno\")\r\n         - Por último mostramos un mensaje informativo al usuario sobre la elimincación del registro."
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 146,
          "character": 1
        },
        "end": {
          "line": 168,
          "character": 27
        }
      },
      "description": "     def seleccion(self): \r\n     - Esta función recoge la fila seleccionada del modelo y establece esos campos en sus respectivos lineEdit\r\n     -----------------------------------------------------------------------------------------------\r\n         if seleccion.indexes():\r\n         - Si hay seleccionada alguna fila\r\n            self.fila = seleccion.indexes()[0].row()\r\n            - Nos quedamos con la fila del primer índice (solo se puede seleccionar una fila)\r\n            dni = self.modelo.index(self.fila, 0).data()\r\n            nombre = self.modelo.index(self.fila, 1).data()\r\n            apellidos = self.modelo.index(self.fila, 2).data()\r\n            curso = self.modelo.index(self.fila, 3).data()\r\n            nota1ev = self.modelo.index(self.fila, 4).data()\r\n            nota2ev = self.modelo.index(self.fila, 5).data()\r\n            nota3ev = self.modelo.index(self.fila, 6).data()\r\n            - Obtenemos los valores del modelo en esa fila\r\n            self.lineEdit_DNI.setText(dni)\r\n            self.lineEdit_Nombre.setText(nombre)\r\n            self.lineEdit_Apellidos.setText(apellidos)\r\n            self.lineEdit_Curso.setText(curso)\r\n            self.lineEdit_Nota1Ev.setText(str(nota1ev))\r\n            self.lineEdit_Nota2Ev.setText(str(nota2ev))\r\n            self.lineEdit_Nota3Ev.setText(str(nota3ev))\r\n            - Modificamos los campos del formulario para establecer esos valores\r\n        else:\r\n            - Si no hay selección,  ponemos la fila inicial a un valor que indica que no está seleccionada ninguna fila\r\n            self.fila = -1"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 185,
          "character": 2
        },
        "end": {
          "line": 206,
          "character": 101
        }
      },
      "description": "    def modificar(self):\r\n\r\n        -  Si es una fila válida la seleccionada\r\n        if self.fila >= 0:\r\n            -  Obtenemos los valores de los campos del formulario\r\n            dni = self.lineEdit_DNI.text()\r\n            nombre = self.lineEdit_Nombre.text()\r\n            apellidos = self.lineEdit_Apellidos.text()\r\n            curso = self.lineEdit_Curso.text()\r\n            nota1ev = self.lineEdit_Nota1Ev.text()\r\n            nota2ev = self.lineEdit_Nota2Ev.text()\r\n            nota3ev = self.lineEdit_Nota3Ev.text()\r\n            \r\n            - Actualizamos los campos en el model\r\n            self.modelo.setData(self.modelo.index(self.fila, 0), dni)\r\n            self.modelo.setData(self.modelo.index(self.fila, 1), nombre)\r\n            self.modelo.setData(self.modelo.index(self.fila, 2), apellidos)\r\n            self.modelo.setData(self.modelo.index(self.fila, 3), curso)\r\n            self.modelo.setData(self.modelo.index(self.fila, 4), nota1ev)\r\n            self.modelo.setData(self.modelo.index(self.fila, 5), nota2ev)\r\n            self.modelo.setData(self.modelo.index(self.fila, 6), nota3ev)\r\n            \r\n            - Ejecutamos los cambios en el modelo\r\n            self.modelo.submit()\r\n            - Mostramos un mensaje de información al usuario con los datos de la modificación.\r\n            QMessageBox.information(self, \"Modificado\", f\"Se ha insertado el alumno con DNI: {dni}\")"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 208,
          "character": 5
        },
        "end": {
          "line": 294,
          "character": 78
        }
      },
      "description": "     def generate(self):\r\n\r\n     - Función que genera el PDF\r\n     ----------------------------------------------------------------------------------\r\n  \r\n        BoolNotaMedia = self.page1.field('miCampo')\r\n        - Variable que recoge el campo obtenido de la primera página del asistente\r\n        ---------------------------------------------------------------------------------\r\n        BoolGraficas = self.page2.field('miCampo2')\r\n        - Variable que recoge el campo obtenido de la segunda página del asistente  \r\n        ------------------------------------------------------------------------------------ \r\n        nota1ev=float(self.lineEdit_Nota1Ev.text())\r\n        nota2ev=float(self.lineEdit_Nota2Ev.text())\r\n        nota3ev=float(self.lineEdit_Nota3Ev.text())\r\n        notaMedia=(nota1ev + nota2ev + nota3ev)/3\r\n        - Recogemos los campos de los line edit y además calculamos las medias de las notas del alumno seleccionado\r\n     -------------------------------------------------------------------------------------------------\r\n        self.data = {\r\n            'dni': self.lineEdit_DNI.text(),\r\n            'nombre': self.lineEdit_Nombre.text(),\r\n            'apellidos': self.lineEdit_Apellidos.text(),\r\n            'curso': self.lineEdit_Curso.text(),\r\n            'notas1ev': self.lineEdit_Nota1Ev.text(),\r\n            'notas2ev': self.lineEdit_Nota2Ev.text(),\r\n            'notas3ev': self.lineEdit_Nota3Ev.text(),\r\n            'notamedia':notaMedia\r\n         }\r\n        - Recogemos los datos del formulario\r\n        --------------------------------------------------------------------------------\r\n         outfile = \"result.pdf\"\r\n         - Especificamos un archivo de salida para el PDF\r\n        ---------------------------------------------------------------------------- \r\n         template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n          template_obj = pagexobj(template)\r\n         -- Establecemos la plantilla de nuestro documento PDF\r\n         canvas = Canvas(outfile)\r\n         xobj_name = makerl(canvas, template_obj)\r\n         canvas.doForm(xobj_name)\r\n         - Creamos el canva para escribir en la plantilla\r\n         ------------------------------------------------------------------------------\r\n         today = datetime.today()\r\n         - Establecemos en la variable today la fecha de hoy\r\n         -------------------------------------------------------------------\r\n         canvas.drawString(275, 638, today.strftime('%F'))\r\n         - La pintamos en el canva establecido\r\n         ----------------------------------------------------------------\r\n         canvas.drawString(126, 500, self.data['dni'])\r\n         canvas.drawString(165, 448, self.data['nombre'])\r\n         canvas.drawString(181, 398, self.data['apellidos'])\r\n         canvas.drawString(150, 345, self.data['curso'])\r\n         canvas.drawString(275, 296, self.data['notas1ev'])\r\n         canvas.drawString(275, 244, self.data['notas2ev'])\r\n         canvas.drawString(275, 191,self.data['notas3ev'])\r\n         - Dibujamos el resto de campos\r\n         ----------------------------------------------------------------------------\r\n         if(BoolNotaMedia==0):    \r\n            canvas.drawString(252,140,str(notaMedia))\r\n         - Si el usuario escogió calcular la nota media la dibujamos en nuestro canva\r\n         --------------------------------------------------------------------------------------\r\n         canvas.save()\r\n         if(BoolGraficas==0):\r\n         - Si el usuario escogió generar la gráfica\r\n            - Generamos gráfica simple\r\n            plt = pg.plot([1,2,3],[float(self.lineEdit_Nota1Ev.text()),float(self.lineEdit_Nota2Ev.text()),float(self.lineEdit_Nota3Ev.text())],symbol='+',symbolSize=30)\r\n            ----------------------------------------------------------------------------\r\n            plt.setTitle(\"Notas por trimestre\", color=\"w\", size=\"25pt\")\r\n            - Le establecemos el título a la gráfica \r\n            -----------------------------------------------------------------------------\r\n            plt.showGrid(x=True, y=True)\r\n            - Establecemos que se muestre la cuadrícula\r\n            ----------------------------------------------------------------------------\r\n            plt.setXRange(1, 3, padding=0)\r\n            plt.setYRange(0, 10, padding=0)\r\n            - Establecemos los rangos de cada uno de los ejes X e Y\r\n            -------------------------------------------------------------------------------\r\n            styles = {\"color\": \"#FFFFFF\", \"font-size\": \"20px\"}\r\n            - Establecemos un estilo para la gráfica\r\n            -------------------------------------------------------------------------------\r\n            plt.setLabel(\"left\", \"Nota\", **styles)\r\n            plt.setLabel(\"bottom\", \"Trimestre\", **styles)\r\n            - Establecemos las etiquetas izquierda y abajo en la gráfica\r\n         -----------------------------------------------------------------------------------\r\n            - Creamos una instancia de exportación con el ítem que queremos exportar\r\n            exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n         -------------------------------------------------------------------------------\r\n            - Establecemos los parámetros de la exportación (anchura), afecta a la altura\r\n            exporter.parameters()['width'] = 120 \r\n         ---------------------------------------------------------------------------------\r\n            - Elegimos el nombre del archivo en el que exportamos la gráfica como imagen\r\n            exporter.export('graphic.png')\r\n          -------------------------------------------------------------------------------\r\n            outfile = \"result.pdf\"\r\n            template = PdfReader(\"result.pdf\", decompress=False).pages[0]\r\n            template_obj = pagexobj(template)\r\n            - Establecemos la plantilla donde dibujaremos la gráfica\r\n            ----------------------------------------------------------------------------------\r\n            canvas = Canvas(outfile)\r\n            xobj_name = makerl(canvas, template_obj)\r\n            canvas.doForm(xobj_name)\r\n         - Creamos el canva\r\n         ----------------------------------------------------------------------------------\r\n            canvas.drawImage(\"graphic.png\", 50, 40, width=None,height=None,mask=None)\r\n         - Y dibujamos la gráfica\r\n         -----------------------------------------------------------------------------------\r\n            canvas.save()\r\n         - Por último guardamos el canva\r\n         -----------------------------------------------------------------------------------\r\n         self.PDFEmbed()\r\n         - Y ejecutamos la finción self.PDFEmbed()\r\n         ------------------------------------------------------------------------------------\r\n         QMessageBox.information(self, \"Finalizado\", \"Se ha generado el PDF\") \r\n         - Mostraremos un mensaje al usuario informandole de que se ha generado el PDF"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 296,
          "character": 1
        },
        "end": {
          "line": 308,
          "character": 43
        }
      },
      "description": "     def PDFEmbed(self):\r\n     - Función que inserta nuestro PDF en la aplicación\r\n     --------------------------------------------------------\r\n        self.InformeAlumno.setEnabled(True)\r\n        - Habilitamos la pestaña InformeAlumno\r\n        -----------------------------------------------------------\r\n        layoutVertical = QVBoxLayout()\r\n        - Creamos un layout vertical\r\n        ---------------------------------------------------------------\r\n        layoutVertical.setGeometry(QRect(0, 0, 851, 591))\r\n        - Le establecemos un tamaño\r\n        -------------------------------------------------------------\r\n        self.InformeAlumno.setLayout(layoutVertical)\r\n        - Le establecemos a la pestaña InformeAlumno el layout creado\r\n        --------------------------------------------------------------\r\n        self.web = QWebEngineView()\r\n        - Creamos una vista web\r\n        --------------------------------------------------------------------------\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        - Habilitamos los pluggins\r\n        ------------------------------------------------------------------------------\r\n        rutaConPDF = Path(\"result.pdf\")\r\n        - Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        ----------------------------------------------------------------------------------\r\n        self.web.load(QUrl(rutaConPDF.absolute().as_uri()))\r\n        -  Cargamos el fichero con la ruta absoluta como uri, usando http o https también se pueden cargar páginas web\r\n        ---------------------------------------------------------------------------------------\r\n        layoutVertical.addWidget(self.web)\r\n        - Y añadimos al layout vertical nuestra vista web\r\n"
    },
    {
      "file": "Trabajo5.py",
      "selection": {
        "start": {
          "line": 310,
          "character": 1
        },
        "end": {
          "line": 314,
          "character": 25
        }
      },
      "description": "     -Por último este bloque ejecutará la aplicación."
    }
  ]
}